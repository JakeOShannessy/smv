name: CMake Build
on: [push, pull_request]
env:
  CACHE_NUMBER: 2
  COMPILER_VERSION: 2022.0.3
  BUILD_TYPE: Release

jobs:
  build_unix_gcc:
    # Set the name of this build, variable depending on the OS
    name: build ${{ matrix.os }} - gcc
    strategy:
      fail-fast: false
      # The matrix sets all the different combinations of builds, e.g. platforms
      # and build configurations
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
    # Set the platform to build on
    runs-on: ${{ matrix.os }}
    steps:
      # Check out the smv repo
      - name: Checkout code
        uses: actions/checkout@v3
      # If we are currently building on Linux (ubuntu) install all the native
      # pre-requisites
      - name: Install linux deps
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential freeglut3-dev libx11-dev libxmu-dev libxi-dev libglew-dev libgd-dev libjson-c-dev libglui-dev
      # If we are building on macos configure the environment to use gcc-14 as
      # the compiler
      - name: set macos gcc
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "CC=gcc-14" >> $GITHUB_ENV
          echo "CXX=g++-14" >> $GITHUB_ENV
          brew install glew gd zlib json-c glui
      # If we are building on linux configure the environment to use gcc as the
      # compiler
      - name: set linux gcc
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
      # Download a snaphot of the fig repo and use that as test data.
      - name: Download test data
        working-directory: ${{github.workspace}}/Tests
        run: ./get_test_data.sh
      # Remove Visualization data on macos as we can't render currently.
      - name: Download test data
        if: runner.os == 'macOS'
        run: rm -rf Verification/Visualization/*.smv
      # Run cmake to build smokeview
      - name: Build
        shell: bash
        run: |
          cmake -B ${{github.workspace}}/cbuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build ${{github.workspace}}/cbuild -j4
          cp ${{github.workspace}}/cbuild/smokeview smokeview
      # Run the CMake-based tests on MacOS
      - name: Test
        if: runner.os == 'macOS'
        shell: bash
        run: |
          ctest --test-dir cbuild -j10 --output-on-failure -V
      # Run the CMake-based tests on Linux
      - name: Test
        if: runner.os == 'Linux'
        shell: bash
        run: |
          xvfb-run ctest --test-dir cbuild -j10 --output-on-failure -V
      # Archive the smokeview executable
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: smokeview-${{ runner.os }}
          path: smokeview
  #build_unix_rpm_gcc:
  #  name: build (rpm) ${{ matrix.os }} - gcc
  #  runs-on:  ubuntu-latest
  #  container: centos:7
  #  strategy:
  #    fail-fast: false
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v3
  #    - name: Install linux deps
  #      run: |
  #        yum -y install epel-release
  #        yum -y install cmake3
  #        yum -y install make gcc-c++ mesa-libGL-devel glut-devel libjpeg-devel libpng-devel gd-devel glew-devel libXmu-devel libXi-devel json-c-devel
  #        yum -y install wget unzip git
  #    - name: set gcc
  #      shell: bash
  #      run: |
  #        echo "CC=gcc" >> $GITHUB_ENV
  #        echo "CXX=g++" >> $GITHUB_ENV
  #    - name: Build
  #      shell: bash
  #      run: |
  #        pkg-config --cflags json-c
  #        cmake3 -B ${{github.workspace}}/cbuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
  #        cmake3 --build ${{github.workspace}}/cbuild -j4
  #        cp ${{github.workspace}}/cbuild/smokeview smokeview
  #    # - name: Download test data
  #    #   working-directory: ${{github.workspace}}/Tests
  #    #   run: ./get_test_data.sh
  #    # - name: Test
  #    #   shell: bash
  #    #   working-directory: ${{github.workspace}}/cbuild
  #    #   run: |
  #    #     ctest -j10 --output-on-failure -V
  #    - name: Archive production artifacts
  #      uses: actions/upload-artifact@v3
  #      with:
  #        name: smokeview-${{ runner.os }}
  #        path: smokeview
  build_windows_msvc:
    name: build ${{ matrix.os }} - msvc
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2022
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Pin vcpkg version
        run: |
          cd C:\vcpkg
          git fetch
          git checkout 2024.03.25
      - name: build smokeview
        shell: cmd
        run: |
          set PATH=%PATH%;C:\Program Files (x86)\WiX Toolset v3.11\bin
          candle --version
          cmake --version
          cmake -B ${{github.workspace}}\cbuild -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DVCPKG_TARGET_TRIPLET=x64-windows -DCMAKE_TOOLCHAIN_FILE=%VCPKG_INSTALLATION_ROOT%/scripts/buildsystems/vcpkg.cmake
          cmake --build ${{github.workspace}}\cbuild -j4 --config ${{env.BUILD_TYPE}}
          copy ${{github.workspace}}\cbuild\Release\smokeview.exe smokeview.exe
      - name: build installer
        shell: cmd
        run: |
          echo %PATH%
          set PATH=%PATH%;C:\Program Files (x86)\WiX Toolset v3.11\bin
          echo %PATH%
          cmake --install ${{github.workspace}}\cbuild --config ${{env.BUILD_TYPE}} --prefix dist
          candle "SMVLuaInstaller.wxs"
          light "SMVLuaInstaller.wixobj"
      - name: Download test data
        working-directory: ${{github.workspace}}/Tests
        shell: pwsh
        run: .\get_test_data.ps1
      - name: Test
        shell: bash
        working-directory: ${{github.workspace}}/cbuild
        run: |
          ctest -j10 -C ${{env.BUILD_TYPE}} --output-on-failure
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: smokeview-windows-msvc
          path: smokeview.exe
      - name: Archive installer
        uses: actions/upload-artifact@v3
        with:
          name: smokeview-windows-msvc.msi
          path: SMVLuaInstaller.msi
